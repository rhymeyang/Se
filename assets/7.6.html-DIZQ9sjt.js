import{_ as t,c as a,a as s,o as i}from"./app-ADi5oltk.js";const r="/Se/images/CyberDefensePro/nanoshell_7.6.2.jpg",o="/Se/images/CyberDefensePro/variables_7.6.3.jpg",n="/Se/images/CyberDefensePro/script_7.6.3.jpg",l="/Se/images/CyberDefensePro/arithmetic_7.6.3.jpg",d="/Se/images/CyberDefensePro/ifelse_7.6.3.jpg",h="/Se/images/CyberDefensePro/while1_7.6.3.jpg",c="/Se/images/CyberDefensePro/while2_7.6.3.jpg",p="/Se/images/CyberDefensePro/meta_7.6.4.jpg",m="/Se/images/CyberDefensePro/meta_2_7.6.4.jpg",u="/Se/images/CyberDefensePro/redirection1_7.6.4.jpg",g="/Se/images/CyberDefensePro/redirection2_7.6.4.jpg",f={};function b(w,e){return i(),a("div",null,e[0]||(e[0]=[s('<h2 id="section-7-6-scripting-and-programming" tabindex="-1"><a class="header-anchor" href="#section-7-6-scripting-and-programming"><span>Section 7.6 Scripting and Programming</span></a></h2><p>As you study this section, answer the following questions:</p><ul><li>What are scripts used for?</li><li>What is a variable in a script?</li><li>What are some shell processor types?</li><li>What program is used in Windows to execute scripts?</li><li>What is the software development life cycle?</li><li>What are the two approaches to reverse engineering?</li></ul><p>In this section, you will learn to:</p><ul><li>Identify programming languages</li><li>Explain the software development life cycle</li><li>Perform reverse engineering</li></ul><p>The key terms for this section include:</p><p><strong>Key Terms and Definitions</strong></p><table class="terms"><caption> Key Terms and Definitions </caption><thead><tr><th>Term</th><th>Definition</th></tr></thead><tbody><tr><td>Shell scripts</td><td> Allows users and administrators to automate tasks using a scripting language like Bash or PowerShell. </td></tr><tr><td>Variables</td><td> Holds reusable dynamic values and are foundational to the use of scripts. </td></tr><tr><td>Boolean operators</td><td>Used to perform comparisons in scripts.</td></tr><tr><td>Metacharacters</td><td> Characters that have special meaning to a computer program, such as shell. </td></tr><tr><td>Redirection</td><td> Allows for the output of commands to be sent to other locations, such as a file or another program. </td></tr><tr><td>PowerShell</td><td>Windows program used to develop and execute scripts.</td></tr><tr><td>Extensible Markup Language (XML)</td><td> A text-based markup language like HTML that uses tags derived from Standard Generalized Markup Language (SGML). XML is used to transfer data. </td></tr><tr><td>JavaScript Object Notation (JSON)</td><td> An object-oriented, event-driven programming language that enables website interaction (as opposed to HTML, which simply displays information). </td></tr><tr><td>Windows Management Instrumentation Command line (WMIC)</td><td> A powerful command line tool for performing administrative tasks and is well suited to scripting and automation. WMIC is part of the Windows Management Instrumentation (WMI) framework. </td></tr><tr><td>Python</td><td> An interpreted, high-level, general-purpose programming language used for a wide variety of purposes. </td></tr><tr><td>Regular expressions (regex)</td><td> Powerful tool used in many programming languages for manipulating text and data. </td></tr><tr><td>Software development life cycle</td><td> Process that helps ensure that programs are functional and secure. </td></tr><tr><td>Software assurance</td><td> Customer confidence that software functions as it should and is free from exploitable vulnerabilities. </td></tr><tr><td>Reverse engineering</td><td> The process of deconstructing software to reveal its design and code. </td></tr></tbody></table><p>This section helps you prepare for the following certification exam objectives:</p><table><thead></thead><thead><tr><th>Exam</th><th>Objective</th></tr></thead><tbody><tr><td>CompTIA CySA+ CS0-003</td><td> 1.3 Given a scenario, use appropriate tools or techniques to determine malicious activity <ul><li> Programming languages/scripting <ul><li>JavaScript Object Notation (JSON)</li><li>Extensible Markup Language (XML)</li><li>Python</li><li>PowerShell</li><li>Shell script</li><li>Regular expressions</li></ul></li></ul><p> 2.1 Given a scenario, implement vulnerability scanning methods and concepts </p><ul><li> Static vs. dynamic <ul><li>Reverse engineering</li></ul></li></ul><p> 2.5 Explain concepts related to vulnerability response, handling, and management </p><ul><li> Secure coding best practices <ul><li>Input validation</li><li>Output encoding</li><li>Session management</li><li>Authentication</li><li>Data protection</li><li>Parameterized queries</li></ul></li><li>Secure software development life cycle (SDLC)</li></ul></td></tr><tr><td>TestOut CyberDefense Pro</td><td> 4.3 Analyze Indicators of compromise <ul><li>Examine applications for any signs of compromise</li></ul></td></tr></tbody></table><h3 id="_7-6-1-programming-and-scripting-overview" tabindex="-1"><a class="header-anchor" href="#_7-6-1-programming-and-scripting-overview"><span>7.6.1 Programming and Scripting Overview</span></a></h3><p>Click one of the buttons to take you to that part of the video.</p><p>Scripting Languages 00:00-02:27 Developing scripts is a useful skill for anyone in the IT field, as scripts can be developed to automate specific tasks that are performed on a regular basis. The script can be developed using a variety of languages and platforms based on the Operating System. In this lesson, we&#39;ll look at some of the different platforms and languages we can use in developing our scripts. We&#39;ll also look at some situations where developing scripts can be useful.</p><p>A script is typically a text file with commands written in a specific scripting language. These commands are usually human-readable, and they efficiently perform repetitive tasks and even complex, data-driven tasks.</p><p>Generally, a scripting language is interpreted in real-time, line by line. A typical program must be compiled before running, meaning the code&#39;s text must be converted into binary code. Scripting languages are usually something a human can look at and interpret, whereas binary code is much more difficult to read.</p><p>One of the more popular scripting languages used today is Python. Python is a high-level, general-purpose programming language that emphasizes easy-to-read code. Python is an extremely versatile language that can be used for various purposes. One of the great features of Python is the large number of libraries that can be used to help adapt Python to practically any purpose.</p><p>In the Linux and Unix world, shell scripting is used extensively for automation and maintenance. Although there are several languages that fall under the term &quot;shell scripting,&quot; the most common form of shell scripting is the Bourne Shell (sh).</p><p>Other shells include the Bourne Again Shell (bash), the Korn Shell (ksh), and the Z Shell (zsh). Each shell has its own syntax variation, but all are directly related to the Bourne Shell.</p><p>On a Windows system, we&#39;ll use PowerShell to develop and run scripts. PowerShell is like bash but uses different commands and syntax. PowerShell uses cmdlets—small, executable functions built into the language—and wraps them together to perform tasks. PowerShell can be used to automate a variety of tasks, such as adding a large number of users into Active Directory by referencing the data in a spreadsheet.</p><p>Scripting languages are also used to develop content on the internet. JavaScript Object Notation, or JSON, is an object-oriented, event-driven programming language that enables website interaction. With web applications becoming more prevalent, JSON has become one of the more popular languages on the internet.</p><p>Extensible Markup Language, or XML, is also used extensively on the internet. XML uses tags like HTML but is used to transfer data, not display it as HTML does.</p><p>Scripting Uses 02:27-03:17 Scripts and scripting languages are used for many tasks, including developing web content, software development, and automating network and system management tasks.</p><p>Scripts can also be used by a security analyst to automate scanning logs or automating complicated tasks in command line tools like Nmap. Attackers will also use scripts to automate their scanning and enumeration processes to exploit vulnerable hosts.</p><p>Automation saves systems administrators a lot of time. If a task can be reduced to collecting data, then all an admin needs to do is run a script that performs a series of single operations repeatedly until the task is completed.</p><p>One common use of scripting is adding users to Active Directory. Instead of adding users one at a time, a PowerShell script will use the data in a spreadsheet to create the accounts, saving time and automating this process.</p><p>Summary 03:17-03:34 That&#39;ll wrap up this lesson on scripting. In this lesson, we looked at some of the more common scripting languages you should be aware of including Python, bash, PowerShell, JSON, and XML. We then went over some examples of how scripts can be used in various areas to automate tasks.</p><h3 id="_7-6-2-shell-scripting-commands-facts" tabindex="-1"><a class="header-anchor" href="#_7-6-2-shell-scripting-commands-facts"><span>7.6.2 Shell Scripting Commands Facts</span></a></h3><p>Scripts are great tools that anyone in the IT field can utilize to automate specific tasks that are performed on a regular basis. Scripts can be developed using a variety of languages and platforms based on the operating system.</p><p>This lesson covers the following topics:</p><ul><li>Shell scripts</li><li>Shell commands</li><li>Writing shell scripts</li></ul><h4 id="shell-scripts" tabindex="-1"><a class="header-anchor" href="#shell-scripts"><span>Shell Scripts</span></a></h4><p>Shell scripts allow users and administrators to automate tasks using a scripting language like Bash or PowerShell. Shell scripts are perfect for repetitive or complicated tasks and are versatile, ranging from a few simple commands to highly complex programming structures.</p><p>Shell scripts are essential for automation and efficiency, and they can automate many tedious tasks that otherwise require slow and error-prone manual effort. For example, shell scripts are great for creating backups, automating software updates, performing software installations, and automating system maintenance.</p><p>Analysts can use shell scripts to locate important information stored in logs or automate complicated commands that depend on command line tools. For example, a script can use N map to find hosts with active ports 80 and 443 and then perform additional steps to collect more information about the discovered services before saving the results to a file.</p><p>Pen testers and attackers also leverage shell scripts to perform various tasks to enumerate hosts and networks or automate the steps required to exploit vulnerabilities. Linux and Unix operating systems use shell scripting extensively for automation and maintenance tasks. There are different variations of shells that are used in these systems, and each has its own syntax. The following table describes these shell command processor types:</p><table><thead><tr><th>Shell Processor Type</th><th>Description</th></tr></thead><tbody><tr><td>Korn shell (ksh)</td><td> Typically used on proprietary UNIX systems, such as IBM&#39;s AIX. </td></tr><tr><td>Bourne shell (sh)</td><td> A simple, lightweight shell found on most *nix systems and devices. </td></tr><tr><td>C shell (csh)</td><td> Often associated with proprietary UNIX, such as Oracle&#39;s Solaris. </td></tr><tr><td>C shell (tcsh)</td><td>An improved version of C shell, available for many platforms.</td></tr><tr><td>Bourne Again shell (bash)</td><td>An improved version of sh and very widely used.</td></tr><tr><td>Z shell (zsh)</td><td> Expands upon Bash shell and supports many plugins to expand its functionality. </td></tr></tbody></table><h4 id="shell-commands" tabindex="-1"><a class="header-anchor" href="#shell-commands"><span>Shell Commands</span></a></h4><p>The following table lists some common Linux (and UNIX) commands and a brief description of their purpose.</p><table><thead><tr><th>Shell Command</th><th>Description</th></tr></thead><tbody><tr><td>cat</td><td>Display the content of a file.</td></tr><tr><td>tail</td><td>Display the last ten lines of a file.</td></tr><tr><td>head</td><td>Display the first ten lines of a file.</td></tr><tr><td>touch</td><td>Create an empty file.</td></tr><tr><td>mkdir</td><td>Create a directory.</td></tr><tr><td>cp</td><td>Copy a file or directory.</td></tr><tr><td>mv</td><td> Move an object, such as a file. Also used to rename files and directories. </td></tr><tr><td>rm</td><td>Remove a file or directory.</td></tr><tr><td>file</td><td>Determine the type of a file.</td></tr><tr><td>ls</td><td>Display the contents of a directory.</td></tr><tr><td>locate</td><td style="height:20px;"> Search for files. Locate uses a database to improve the speed and efficiency of searches. </td></tr><tr><td>find</td><td>Search for files by parsing the file system.</td></tr><tr><td>wget</td><td>Simple command to retrieve content from an HTTP server.</td></tr><tr><td>curl</td><td>Similar to wget but includes more sophisticated options.</td></tr></tbody></table><p>The following table lists common administrative commands. These commands are particularly important, and their use should be closely monitored.</p><table><thead><tr><th>Administrative Shell Command</th><th>Description</th></tr></thead><tbody><tr><td>vi/vim</td><td> A file editor for use in a terminal. Very popular but nonintuitive to use. </td></tr><tr><td>su</td><td>Substitute or switch user.</td></tr><tr><td>sudo</td><td>Precedes a command that requires elevated privileges.</td></tr><tr><td>useradd</td><td>Create a user account.</td></tr><tr><td>usermod</td><td>Change the attributes of a user account.</td></tr><tr><td>chmod</td><td> Change the read, write, and execute attributes of a file or directory. </td></tr><tr><td>chown</td><td>Change permissions on a file or directory.</td></tr><tr><td>mkfifo</td><td> Similar in concept to a standard | style pipe but implemented as an actual file. </td></tr></tbody></table><h4 id="writing-shell-scripts" tabindex="-1"><a class="header-anchor" href="#writing-shell-scripts"><span>Writing Shell Scripts</span></a></h4><p>The use of vi and vim text editors has been a staple of Linux and UNIX administration for many decades. Understanding how to use this tool is important, but its learning curve is steep.</p><p>The nano text editor has been in active development for many years, and its adoption has increased in recent years. Nano provides a user-friendly and intuitive interface, as shown in the following screen capture.</p><p><img src="'+r+'" alt="The nano text editor with the /etc/ssh/ssh_config file loaded."></p><h3 id="_7-6-3-bash-shell-variables-and-loops-facts" tabindex="-1"><a class="header-anchor" href="#_7-6-3-bash-shell-variables-and-loops-facts"><span>7.6.3 Bash Shell Variables and Loops Facts</span></a></h3><p>Variables, loops, and other tools are used extensively in bash scripts. Proper utilization of these tools is vital in creating robust and powerful scripts.</p><p>This lesson covers the following topics:</p><ul><li>Variables</li><li>Arithmetic</li><li>Boolean operators</li><li>If/Else statements</li><li>Loops</li></ul><h4 id="variables" tabindex="-1"><a class="header-anchor" href="#variables"><span>Variables</span></a></h4><p>Variables hold reusable values and are foundational to the use of scripts. In this example, a shell variable named SERVER has been created. The export command sets the variable within the current shell session.</p><p>The variable SERVER is created with a value of 10.0.2.26. The value saved to a variable can be recalled using the $ symbol. When reading the command, one way to remember this is to replace $ with &quot;The value of.&quot; For the second line below, echo $SERVER can be translated as &quot;echo the value of SERVER.&quot; On the third line, the SERVER variable is used with the ping command. Notice that the value of SERVER is displayed in the command output.</p><p><img src="'+o+'" alt="Example of variable in use"></p><p>Variable values can be set dynamically. In the example below, a script named script.sh is written using the nano text editor. Afterward, the chmod command is used to set the execute attribute on the script, allowing it to be easily used. On the third line below, the cat command displays the content of the script file. The script contains the following four lines:</p><ol><li>The shebang identifying as a bash script</li><li>Echo a prompt for a name</li><li>Saving user-typed input to the variable NAME</li><li>Echo a response, including the user-provided value</li></ol><p><img src="'+n+'" alt="Example of shell script"></p><h4 id="arithmetic" tabindex="-1"><a class="header-anchor" href="#arithmetic"><span>Arithmetic</span></a></h4><p>Shell scripts support many mathematical operations. Shells like bash must incorporate a few special conventions in order to perform arithmetic. For example, the expr command is needed when performing arithmetic.</p><p>The script below shows the use of variables and arithmetic. The variables num1 &amp; num2 hold values supplied by the user, and the variable sum is used to store the result of adding them together. Notice that the arithmetic operation is contained with back quotes (sometimes called ticks). The back quote resembles a single quote but is not the same. The back quote key is typically located on the top-left corner of the keyboard.</p><p><img src="'+l+'" alt="Example of shell script using arithmetic expressions"></p><p>The following table shows the different arithmetic operators.</p><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td>+</td><td>Addition</td></tr><tr><td>-</td><td>Subtraction</td></tr><tr><td>*</td><td>Multiplication</td></tr><tr><td>/</td><td>Division</td></tr><tr><td>%</td><td>Modulus</td></tr></tbody></table><h4 id="boolean-operators" tabindex="-1"><a class="header-anchor" href="#boolean-operators"><span>Boolean Operators</span></a></h4><p>Boolean operators are used to perform comparisons. For example, the statement var1 = var2 would assign the value of var2 to the variable var1. This is a problem if the intent is just to determine equivalency. The correct syntax to compare values is var1 = = var2. If they are the same, the result is &quot;true;&quot; if not, the result is false.</p><p>The following table describes some common boolean operators:</p><table><thead><tr><th>Boolean Operator</th><th>Description</th></tr></thead><tbody><tr><td> ==</td><td>Is equal to</td></tr><tr><td>!=</td><td>Is not equal to</td></tr><tr><td>-eq</td><td>Alternative form of &quot;is equal to&quot;</td></tr><tr><td>-ne</td><td>Alternative form of &quot;is not equal to&quot;</td></tr><tr><td>-gt</td><td>Greater than</td></tr><tr><td>-lt</td><td>Less than</td></tr><tr><td>-ge</td><td>Greater than or equal to</td></tr><tr><td>-le</td><td>Less than or equal to</td></tr></tbody></table><h4 id="if-else-statements" tabindex="-1"><a class="header-anchor" href="#if-else-statements"><span>If/Else Statements</span></a></h4><p>Boolean operators are important for decision-making in a shell script. Comparisons are used to create decision branches which help steer the direction of the script&#39;s commands.</p><p>If/Else statements help identify a course of action based on a set of comparisons. Multiple comparisons incorporate an <code>if/elif/else</code> format, as shown in the following example. Notice that the boolean c omparisons are contained within square brackets , and there are spaces between the brackets and the c omparison statement. This script prompts the user for a number and compares it to the number 100, which is saved in the mynum variable. The script displays a different message depending on the results of the comparison.</p><p><img src="'+d+'" alt="Example of shell script using if/else statements"></p><h4 id="while-loops" tabindex="-1"><a class="header-anchor" href="#while-loops"><span>While Loops</span></a></h4><p>In the previous example, the script needed to be rerun each time we wanted to play the game. What if a player wanted to make several guesses to try and determine the &quot;secret&quot; number without needing to relaunch the script each time? A while loop will continue processing a series of commands until a predetermined condition is met. In the following example, the <code>If/Else</code> script is contained within a simple <code>while/done</code> loop. The <code>If/Else</code> portion of the program will continue to run until the user presses the CTRL-C key combination.</p><p><img src="'+h+'" alt="Example of shell script using while loops"></p><p>The following shows how the program operates when started. Notice that the script does not need to be restarted after each guess because of the while loop.</p><p><img src="'+c+'" alt="Example of shell script using while loops"></p><h3 id="_7-6-4-metacharacters-quotes-and-redirection-facts" tabindex="-1"><a class="header-anchor" href="#_7-6-4-metacharacters-quotes-and-redirection-facts"><span>7.6.4 Metacharacters, Quotes, and Redirection Facts</span></a></h3><p>This lesson covers the following topics:</p><ul><li>Metacharacters</li><li>Command substitution</li><li>Redirection</li></ul><h4 id="metacharacters" tabindex="-1"><a class="header-anchor" href="#metacharacters"><span>Metacharacters</span></a></h4><p>Metacharacters are characters that have special meaning to a computer program, such as a shell. Metacharacters include:</p><ul><li><code>New line</code>, <code>space</code>, <code>&amp; tab</code></li><li>The characters <code>\\* ? [ ] &#39; &quot; \\ $ ; &amp; ( ) | ^ &lt; &gt;</code></li></ul><p>If a metacharacter needs to be used as a normal character, problems can arise. The following examples shows different ways to manage metacharacters:</p><p><img src="'+p+'" alt="Examples of metacharacters"></p><ul><li>In the first example, the metacharacter problem is shown as the cost of the taco not being displayed.</li><li>In the second example, the escape character <code>\\</code> is used to instruct the shell to translate the $ as a character and not as a metacharacter. The result is that the cost of the taco is successfully displayed.</li><li>The third and fourth examples show the impact of quotes. The third example shows that text contained within single quotes is interpreted as text only, even if metacharacters are included.</li><li>The fourth example shows that double quotes preserve the meaning of metacharacters contained within them.</li><li>Lastly, the use of back quotes allows the result of a command to be displayed. Notice that when the <strong><code>date +%A</code></strong> command is contained within single quotes, the characters are displayed instead of the result of the command. (The result of the <strong>date +%A</strong> command is to display the current day of the week.) When the <strong><code>date +%A</code></strong> command is contained within double quotes, the back quotes are interpreted differently.</li></ul><h4 id="command-substitution" tabindex="-1"><a class="header-anchor" href="#command-substitution"><span>Command Substitution</span></a></h4><p>Variables can also be used to store commands. The following example shows how this is accomplished. Notice that the commands are contained within back quotes.</p><p><img src="'+m+'" alt="Examples of metacharacters"></p><h4 id="redirection" tabindex="-1"><a class="header-anchor" href="#redirection"><span>Redirection</span></a></h4><p>Redirection allows for the output of commands to be sent to other locations, such as a file or another program. The following example shows the output of an Nmap scan being redirected to a file. Nmap provides native output redirection capabilities too, but its standard output is being used as an example here.</p><p>The redirection character <code>&gt;</code> is being used to send the output of the Nmap scan to a file named <em>scan_output.txt</em> . Notice that when the command is rerun to scan a different port, the <em>scan_output.txt</em> file is overwritten with the new results.</p><p><img src="'+u+'" alt="Examples of metacharacters"></p><p>To append output to a file, the <code>&gt;&gt;</code> characters must be used. Notice in the following example how the second scan uses the <code>&gt;&gt;</code> characters to append the new results to the end of the file, preserving the original content.</p><p><img src="'+g+'" alt="Examples of metacharacters"></p><h3 id="_7-6-5-windows-powershell-facts" tabindex="-1"><a class="header-anchor" href="#_7-6-5-windows-powershell-facts"><span>7.6.5 Windows PowerShell Facts</span></a></h3><p>Developing and executing scripts in Windows is done using PowerShell. PowerShell is similar to other shell programs but uses its own commands and syntax. PowerShell is built on the .NET framework and uses cmdlets, which are small executable functions built into the PowerShell language.</p><p>This lesson covers Windows PowerShell:</p>',96)]))}const v=t(f,[["render",b],["__file","7.6.html.vue"]]),S=JSON.parse('{"path":"/CyberDefensePro/7.6.html","title":"7.6 Scripting and Programming","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"7.6 Scripting and Programming","description":"some description"},"headers":[{"level":2,"title":"Section 7.6 Scripting and Programming","slug":"section-7-6-scripting-and-programming","link":"#section-7-6-scripting-and-programming","children":[{"level":3,"title":"7.6.1 Programming and Scripting Overview","slug":"_7-6-1-programming-and-scripting-overview","link":"#_7-6-1-programming-and-scripting-overview","children":[]},{"level":3,"title":"7.6.2 Shell Scripting Commands Facts","slug":"_7-6-2-shell-scripting-commands-facts","link":"#_7-6-2-shell-scripting-commands-facts","children":[]},{"level":3,"title":"7.6.3 Bash Shell Variables and Loops Facts","slug":"_7-6-3-bash-shell-variables-and-loops-facts","link":"#_7-6-3-bash-shell-variables-and-loops-facts","children":[]},{"level":3,"title":"7.6.4 Metacharacters, Quotes, and Redirection Facts","slug":"_7-6-4-metacharacters-quotes-and-redirection-facts","link":"#_7-6-4-metacharacters-quotes-and-redirection-facts","children":[]},{"level":3,"title":"7.6.5 Windows PowerShell Facts","slug":"_7-6-5-windows-powershell-facts","link":"#_7-6-5-windows-powershell-facts","children":[]}]}],"git":{"updatedTime":1746806410000},"filePathRelative":"CyberDefensePro/7.6.md"}');export{v as comp,S as data};
