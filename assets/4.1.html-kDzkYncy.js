import{_ as n,c as i,a,b as e,d as t,o}from"./app-DSF2Djgc.js";const r="/Se/images/CyberDefensePro/harden_config-4.1.3.png",l={};function c(h,s){return o(),i("div",null,s[0]||(s[0]=[a('<h2 id="section-4-1-operating-system-concepts" tabindex="-1"><a class="header-anchor" href="#section-4-1-operating-system-concepts"><span>Section 4.1 Operating System Concepts</span></a></h2><p>As you study this section, answer the following questions:</p><ul><li>What are three ways you can access and manage Windows services?</li><li>How can you start or stop FTP services running on a Linux system?</li><li>What are some best practice system hardening configurations?</li><li>What is a hive composed of in a Registry database?</li><li>Where are configuration settings stored in a Linux system?</li></ul><p>In this section, you will learn to:</p><ul><li>Manage Linux services</li><li>Enable and disable Linux services</li><li>Disable Windows services</li><li>View process information</li></ul><p>The key terms for this section include:</p>',6),e("table",{class:"terms"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Term"),e("th",{scope:"col",class:"fw-bold"}," Definition")])]),e("tbody",null,[e("tr",null,[e("td",null,"Windows services"),e("td",null,"Applications that start when a computer is booted or when a designated event occurs. They run quietly in the background until shutdown or until manually stopped.")]),e("tr",null,[e("td",null,"Linux services"),e("td",null,"Serve a similar purpose to Windows services. In Linux, these are also called daemons.")]),e("tr",null,[e("td",null,"FTP service"),e("td",null,"A protocol for transferring files over the internet.")]),e("tr",null,[e("td",null,"Daemon"),e("td",null,"A background process that is not tied to a running shell or terminal.")]),e("tr",null,[e("td",null,"System hardening"),e("td",null,"The process of reducing security risks to hardware, software, applications, networks, and processes through security policies and tools.")]),e("tr",null,[e("td",null,"Windows Registry"),e("td",null,"A database for storing operating system, device, and software application configuration information.")])])],-1),e("p",null,"This section helps you prepare for the following certification exam objectives:",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Exam"),e("th",{scope:"col",class:"fw-bold"}," Objective")])]),e("tbody",null,[e("tr",null,[e("td",null,"CompTIA CySA+ CS0-003"),e("td",null,[t("1.1 Explain the importance of system and network architecture concepts in security operations. "),e("br"),e("ul",null,[e("li",null,[t("Operating system (OS) concepts "),e("ul",null,[e("li",null,"Windows Registry"),e("li",null,"System hardening"),e("li",null,[t("File structure "),e("ul",null,[e("li",null,"Configuration file locations")])]),e("li",null,"System processes"),e("li",null,"Hardware architecture")])])]),e("p",null,"1.2 Given a scenario, analyze indicators of potentially malicious activity"),e("ul",null,[e("li",null,[t("Network-related "),e("ul",null,[e("li",null,"Scans/sweep")])])]),e("p",null,"2.1 Given a scenario, implement vulnerability scanning methods and concepts"),e("ul",null,[e("li",null,[t("Industry framework "),e("ul",null,[e("li",null,"Center for Internet Security (CIS) benchmarks")])])]),e("p",null,"2.2 Given a scenario, analyze output from vulnerability assessment tools"),e("ul",null,[e("li",null,[t("Tools "),e("ul",null,[e("li",null,[t("Multipurpose "),e("ul",null,[e("li",null,"Nmap")])])])])])])]),e("tr",null,[e("td",null,"TestOut CyberDefense Pro"),e("td",null,[t("1.2 Monitor software and systems "),e("br"),e("ul",null,[e("li",null,"Analyze executable processes"),e("li",null,"Review web application security")]),e("p",null,"3.2 Implement system hardening"),e("ul",null,[e("li",null,"Disable unnecessary services"),e("li",null,"Check service configuration")]),e("p",null,"4.3 Analyze indicators of compromise"),e("ul",null,[e("li",null,"Inspect systems for any signs of compromise")])])])])],-1),a('<h3 id="_4-1-1-view-windows-services" tabindex="-1"><a class="header-anchor" href="#_4-1-1-view-windows-services"><span>4.1.1 View Windows Services</span></a></h3><p>Click one of the buttons to take you to that part of the video.</p><p>View Windows Services 00:00-01:35 In this demonstration, we&#39;re going to spend some time learning how to troubleshoot services on a Windows system. Services are special applications that run on Windows. They run in the background without a user interface. For example, if I were to come over here and launch Notepad, I see a user interface that I can use to interact with it.</p><p>If I go in to Task Manager, under Apps I see my Notepad executable. Notice down here that there&#39;s a lot of other software running on this system, but I see only Notepad on the Desktop.</p><p>We can see the same thing over here on the Details tab. These are all services. They run in the background. They don&#39;t provide a user interface like Notepad does, but they do provide us with critical services that are required for Windows to run. From time to time, these services have problems and you&#39;ll need to be able to troubleshoot them.</p><p>For example, on this system, I use a special piece of software to establish a remote connection with another computer over the internet. It allows me to communicate with that other computer so that I can provide tech support. Let&#39;s close these Windows and take a look at this software.</p><p>When I tried to establish this remote connection, I got an error message indicating that the service isn&#39;t responding. It&#39;s not that I can&#39;t contact the remote computer or that I have incorrect credentials. I can&#39;t even get the application to run properly.</p><p>So in this case, we need to do troubleshooting. The name of the application that I&#39;m using here to establish the connection is TeamViewer. That gives me a good clue as to what service I need to look for to troubleshoot the problem. Let&#39;s go ahead and close this.</p><p>Use Services Desktop App 01:35-03:23 You troubleshoot services on a Windows system using the Services app. If you search for services.msc, you can click it from the search results and the app opens. Here, I see a list of all the services that are currently running on this system.</p><p>We see a list of each service. We see a description of what that service does. We see its current status; whether it&#39;s running or not. We see how it is started. Is it automatically when the system boots or does it have to be started manually? And we see the name of the user account that the system runs as on the system.</p><p>In this situation, I&#39;m having trouble with my TeamViewer service. I scroll down and, sure enough, there is my TeamViewer service. If I look in the status column, I note right away that I&#39;ve got a problem. Its startup type is set to Disabled. That gives me a clue right away that the service for whatever reason was not started when the system booted up.</p><p>I&#39;ll double-click the service and here I can configure various things. For example, notice here under startup type, it&#39;s been set to Disabled. That&#39;s why it&#39;s stopped.</p><p>If I click this drop-down list, I can now decide whether I want it to start manually, meaning I have to come in to the Services desktop app and start the service whenever I want to use it. Or, I can set it to automatic, in which case it&#39;ll automatically be started every time the system boots. That&#39;s what I want to do. I use this service frequently enough that I want it loaded when the computer starts. Click Apply.</p><p>If the service does not start, I have two things I can do. I can over here and click Start. Or, I can reboot the system. It says that the service is running, so I should be good to go. Click OK.</p><p>Here I can see TeamViewer is now set to Automatic and the Status is Running. If for some reason I needed to stop the service or restart it, I could come back here and do so. I&#39;ll close this Window.</p><p>Use Task Manager 03:23-04:10 Before we end, I want to show you that you can manage services a few more ways, the first being Task Manager.</p><p>Now, you can&#39;t do nearly as much in Task Manager as you can in the Services desktop app. But it still can be a useful tool. Let&#39;s go to the Services tab in Task Manager. You can see that all of the same services we just looked at are listed here as well.</p><p>For example, here&#39;s my TeamViewer service. Here is its current status; it&#39;s running. Within Task Manager, I can right-click the service and when I do, I can perform some basic management tasks such as restarting the service or stopping it.</p><p>If I right-click again, we can also go to Details. In that case, the process associated with that service is highlighted and I can see some information about that process listed here. Let&#39;s close Task Manager.</p><p>Use Msconfig 04:10-04:50 Be aware that you can also use the system configuration tool to manage services on the system. Let&#39;s come down, type msconfig, press Enter and then click Services. Here, you can enable or disable particular services at startup in this interface by checking these boxes.</p><p>Now that being said, as you go through this list of services, you probably won&#39;t recognize very many of these. You won&#39;t know whether a service is necessary or not. So be very careful before you go through here and start disabling services. Before you do that, go ahead and go on the internet and search the name of that service to find out what it is, what it does, and if it&#39;s necessary for the system to run or not.</p><p>Summary 04:50-05:11 That&#39;s it for this demonstration. In this demo we talked about troubleshooting services. We discussed what a service is, we practiced using the Services desktop app to troubleshoot services. We explained how to use Task Manager to troubleshoot services and we optimized services using the system configuration utility.</p><h3 id="_4-1-2-view-linux-services" tabindex="-1"><a class="header-anchor" href="#_4-1-2-view-linux-services"><span>4.1.2 View Linux Services</span></a></h3><p>Click one of the buttons to take you to that part of the video.</p><p>View Linux Services 00:00-00:30 During the information gathering phase of a penetration test, you&#39;ll probably collect information about services running on different systems. You may have used nmap or other tools to discover services, and now you need to actually work with them. It&#39;s important to know many things about services: how to start them, see if they&#39;re running, stop them, restart them, enable them, and disable them. For this demo, we&#39;re going to work with an Ubuntu Linux system and practice working with some services.</p><p>View Services Using the systemctl Command 00:30-01:23 I&#39;m already logged on to the system, and I&#39;ll start the terminal. I have a shortcut here, but you can also go here, to Show Applications, and then search for &#39;terminal&#39; in the search box.</p><p>We are going to use the systemctl command to view all running daemons. Services on Linux are usually run as daemons. A daemon is a background process that isn&#39;t tied to a running shell or terminal. Using the &#39;systemctl list-units --type=service&#39; command, we get a list of running service daemons. The output is stopped at the pages end, meaning we have to scroll down with the arrow keys or press the space bar to see the next page. I&#39;ll press the space bar once, then again, and note the various running daemons.</p><p>We have a ssh daemon waiting for incoming connections. Here, there&#39;s an FTP service. On this system, there&#39;s no reason to have FTP running, so let&#39;s see how we can stop it.</p><p>I&#39;ll clear my screen.</p><p>Start and Stop FTP Services 01:23-02:45 To manage the services, I&#39;m going to use the &#39;systemctl&#39; command again.</p><p>Let&#39;s look at my FTP server. First, I want to see its status. So, let&#39;s type &#39;sudo systemctl status vsftpd&#39; and press Enter. It says it&#39;s enabled, but it&#39;s currently stopped.</p><p>I&#39;m going to use my up arrow to get to the last command, change it from status to &#39;start&#39;, and press Enter. Now I&#39;ll arrow up until I see status and press Enter again.</p><p>I can see that it&#39;s running along with some statistics, such as how long it&#39;s been up. I can also see the process ID, or PID, right here. Let&#39;s clear the screen.</p><p>Now I&#39;m going to use my up arrow to go back to my last command. I&#39;m going to backspace here, get rid of the word start and type in &#39;stop&#39; to stop the FTP service.</p><p>I&#39;ll type &#39;clear&#39; to clean up the screen. Now let&#39;s arrow up to status again, press Enter, and see what&#39;s going on. This last line says it&#39;s stopped.</p><p>I&#39;ll press Ctrl+C to exit this command and then type &#39;clear&#39;.</p><p>Now, what if I made changes to my FTP server, and I need to restart the service? I can just do a restart. Let&#39;s up arrow to the last command, backspace here, type in &#39;restart&#39;, and press Enter. Arrow up to the last command, backspace, and change this to &#39;status&#39;. Press Enter, and you can see my service restarted. I&#39;ll clear the screen again.</p><p>Enable and Disable FTP Services 02:45-03:49 So far, we&#39;ve stopped and started our FTP service. But what if I want to have it start at system startup? Or, perhaps, not start when the system starts up?</p><p>First, let&#39;s see if the service is enabled or not. I can do that with the &#39;is-enabled&#39; command. I&#39;ll arrow up to the last command and change this part to &#39;is-enabled&#39;. Press Enter, and right here, it says that it&#39;s enabled.</p><p>What if you want to have your service start every time your system starts? You can do that by changing this to &#39;enable&#39; and pressing Enter. Now you can see the status is enabled.</p><p>If I don&#39;t want the service to start, I&#39;ll arrow up and change this to &#39;disable&#39;. Press Enter, and that&#39;ll tell this system not to start FTP at startup. I&#39;ll arrow up and change this to &#39;status&#39;, and you can see that, up here, it says disabled. So when the system boots, FTP won&#39;t start. Note that the service is still running at the moment because all we did was keep it from running at startup; we didn&#39;t stop it from running at this moment.</p><p>Summary 03:49-04:06 That&#39;s it for this demo. In this demo, we worked with system services. First, we viewed the services to see what was on our system. Then we practiced stopping, starting, enabling, and disabling services.</p><h3 id="_4-1-3-system-hardening-and-configuration-files" tabindex="-1"><a class="header-anchor" href="#_4-1-3-system-hardening-and-configuration-files"><span>4.1.3 System Hardening and Configuration Files</span></a></h3><p>This lesson covers the following topics:</p><ul><li>System hardening</li><li>Windows Registry and file system</li><li>Configuration files</li><li>System processes</li><li>Hardware architecture</li></ul><h4 id="system-hardening" tabindex="-1"><a class="header-anchor" href="#system-hardening"><span>System Hardening</span></a></h4><p>System hardening enhances the security of an operating system, application, device, or service by reducing its attack surface. Hardening involves enabling or disabling specific features and restricting access to sensitive areas of the system, such as protected operating system files, Windows Registry, configuration files, and logs. Hardening includes disabling unnecessary services, limiting user privileges, patching the operating system, and many other changes.</p><p>Best-practice hardening configurations can be very complex. Examples of best-practice hardening guides include DoD STIGs ( https://public.cyber.mil/stigs/ ) and CIS Benchmarks™ ( https://www.cisecurity.org/cis-benchmarks/ ). Version 1.0.0 of the CIS Microsoft Windows 11 Enterprise Benchmark contains over 1,200 pages of recommendations.</p><p><img src="'+r+'" alt="A screenshot of the C I S benchmark website listing several downloadable benchmarks for the Microsoft Windows operating system."></p><p>A screenshot of the CIS Benchmarks™ website. (Screenshot courtesy of Center for Internet Security® and CIS Benchmarks™.)</p><h4 id="windows-registry-and-file-system" tabindex="-1"><a class="header-anchor" href="#windows-registry-and-file-system"><span>Windows Registry and File System</span></a></h4><p>The Windows Registry is a database for storing operating system, device, and software application configuration information. The Registry is comprised of a set of five root keys that contain computer and user databases.</p><ul><li>The HKEY_LOCAL_MACHINE (HKLM) database governs system-wide settings.</li><li>The HKEY_USERS database includes settings that apply to individual user profiles, such as desktop personalization.</li><li>HKEY_CURRENT_USER is a subset of HKEY_USERS with the settings for a logged-in user.</li></ul><p>The Registry database is stored in binary files called hives. A hive comprises:</p><ul><li>A single file (with no extension)</li><li>A .LOG file (containing a transaction log)</li><li>A .SAV file (a copy of the key as it was at the end of setup)</li><li>An .ALT backup file</li></ul><p>Most of these files are stored in the C:\\Windows\\System32\\Config folder, but the hive file for each user profile (NTUSER.DAT) is stored in the folder holding the user&#39;s profile.</p><h5 id="windows-registry-files-stored-in-c-windows-system32-config" tabindex="-1"><a class="header-anchor" href="#windows-registry-files-stored-in-c-windows-system32-config"><span>Windows Registry Files stored in C:\\Windows\\System32\\Config</span></a></h5><table><thead><tr><th scope="col" class="fw-bold"> Subkey Name</th><th scope="col" class="fw-bold"> Description</th></tr></thead><tbody><tr><td>SAM (Security Accounts Manager)</td><td>Stores username information for accounts used on the current computer.</td></tr><tr><td>SECURITY</td><td>Linked to the security database of the domain the current user is logged onto.</td></tr><tr><td>SOFTWARE</td><td>Contains settings for software and the Windows operating system.</td></tr><tr><td>SYSTEM</td><td>Contains settings for drivers and file systems.</td></tr><tr><td>DEFAULT</td><td>Contains settings for the LocalSystem account profile.</td></tr></tbody></table><h4 id="configuration-files" tabindex="-1"><a class="header-anchor" href="#configuration-files"><span>Configuration Files</span></a></h4><p>Linux does not have a Registry database like Windows. All configuration settings are stored in text files saved in the file system. As a general rule, all configuration files are contained within subdirectories of the /etc directory but are also often located in /usr, /opt, /var, among others.</p><p>Software applications and operating systems (including Windows) use configuration files extensively. They allow the operating system and applications running on it to be configured and depend upon different formatting standards.</p><p>Some common configuration file format standards include the following:</p><ul><li>Initialization file (INI) - Uses key-value pairs associated using an equal sign (Example: MicroscopeType=3DMic9).</li><li>eXtensible Markup Language (XML) - Uses tag formatting similar to HTML and is often used by APIs to exchange information.</li><li>Yet Another Markup Language (YAML) - YAML files use a colon (Example: first_name: Adam) and careful indentation to associate groups of settings and are an increasingly popular format.</li><li>JavaScript Object Notation (JSON) - Similar formatting to YAML with the addition of {} and [] brackets to group settings. Typically, associated applications are written using JavaScript.</li></ul><h4 id="system-processes" tabindex="-1"><a class="header-anchor" href="#system-processes"><span>System Processes</span></a></h4><p>System processes are background tasks that run on a computer without user interaction and often without the user&#39;s knowledge. System processes, such as the operating system kernel and other system services, are essential for the operating system to manage system resources, such as memory, network connections, and hardware devices. System processes can also be used to launch applications and perform other tasks. Examples of system processes include antivirus scans, disk defragmentation, user authentication, printing, and system updates.</p><h4 id="hardware-architecture" tabindex="-1"><a class="header-anchor" href="#hardware-architecture"><span>Hardware Architecture</span></a></h4><p>Hardware architecture describes the underlying technology used by a device to perform computational tasks. Operating systems and applications are designed to run on a specific hardware architecture. Different architectures emphasize different characteristics, such as scalability, raw processing power, power management, and other features. ARM and x86 architectures are common, with x86 dominating desktops, laptops, and server computers, and ARM architectures dominant in smartphones, tablets, and single-board computers like the Raspberry Pi. Software designed to run on one architecture cannot run on another without using an emulator.</p><h3 id="_4-1-4-scanning-and-terminating-processes" tabindex="-1"><a class="header-anchor" href="#_4-1-4-scanning-and-terminating-processes"><span>4.1.4 Scanning and Terminating Processes</span></a></h3><p>Click one of the buttons to take you to that part of the video.</p><p>Scanning and Terminating Processes 00:00-01:01 In this demonstration, I&#39;m going to show you how to scan for and terminate processes running on a Linux system. Before we do that that, keep in mind that you should always try to cleanly exit a process running on your Linux system.</p><p>For example, if I open gedit, you see I can cleanly exit this program and its associated processes using the X button. Likewise, if I have a daemon running on the system, then I should use the systemctl command to shut down that service. But there may be times when these options don&#39;t work, and you&#39;ll need to find and kill a running process from the command line. You might have a process running on your system that&#39;s hung, and using the traditional interface to close it isn&#39;t working. Or maybe you&#39;ve found a process started by an attacker, such as in a zombie attack, and you want to kill it immediately.</p><p>Regardless of the need, there are several different commands you can use to manually terminate that process. Let&#39;s look at three of them: kill, killall, and pkill.</p><p>Kill Command 01:01-01:39 We&#39;ll start with the kill command. Let&#39;s run &#39;gedit&#39; again, but this time I&#39;ll use the ampersand (&amp;) to run the program in the background. This makes working in the shell prompt a little easier.</p><p>As we look at each of these commands, keep in mind that each process started in Linux is assigned a Process ID number, or PID. With this Linux distribution, when I started gedit, it showed me the PID – in this case, 4050. Most of the time the process will already be running, and your job is to find out which process to kill. A simple way to do that is to run the ps command. When you run this command, you see the same PID for gedit.</p><p>Kill Signals 01:39-03:18 The full syntax for the kill command is to enter &#39;kill&#39;, a dash (–), and then the kill signal that you want to send to the process, such as 15, followed by the process ID, 4050. When I press Enter, gedit is killed.</p><p>If the process you&#39;re running isn&#39;t playing nice, you may need to use a different kill signal. To see which kill signals are available, you can type ‘kill -l&#39;, which displays a list of all the different kill signals available. Some of these signals are more useful than others. There are four you should be familiar with.</p><p>The first one is kill signal number 15, or SIGTERM. This signal tells the process to terminate immediately and allows the process to clean up after itself before exiting. In fact, if you kill a process without specifying a kill signal, the default kill signal is 15.</p><p>The next kill signal to be familiar with is number 1, or SIGHUP. SIGHUP sends a signal to restart the process. After restarting, the process will be assigned the same PID number that it had when it was running previously.</p><p>The third signal is signal 2, or SIGINT. It sends a Ctrl + C sequence to the process. The one I want to discuss is number 9, or SIGKILL.</p><p>SIGKILL is more of a brute force process and, in most cases, should only be used when the other signals we discussed aren&#39;t killing a hung process or the process initiated by a cyberattack. If you have to use kill 9, be aware that the process may not be able to clean up after itself. The resources that were allocated to the process will remain allocated until you restart the system--it leaves a lot of junk behind.</p><p>killall Command 03:18-04:24 In addition to kill, you can also use the &#39;killall&#39; command. This command adds the ability to kill all processes without knowing the PID. It also kill all the processes that matches the specified criteria as long as the criteria matches exactly.</p><p>To see how this works, we&#39;re going to use the ‘yes&#39; command, which will output a string repeatedly until it&#39;s killed. To do that, I&#39;ll type t ‘yes &gt; /dev/null &amp;&#39;. This sends the string generated by the yes command to the standard null output. Let&#39;s do this several more times.</p><p>Now when I run ps, you see I have 3 ‘yes&#39; processes running. To kill all these processes with one command, I need to type ‘killall -15 yes&#39;. But before doing that, let me show you what happens if I don&#39;t use the full name of the process. To do that, I&#39;ll delete the ‘S&#39;. When I press Enter, you see there are no Y E processes running, so the kill command fails. But when I use the full name, it finds all the yes processes and kills them all.</p><p>pkill Command 04:24-05:13 Next, we have the pkill command. The pkill command is very similar to killall. You don&#39;t need to know the PID, and it kills all processes that match the options entered. pkill also lets you kill process where the criteria is only a partial match.</p><p>Let&#39;s start several more yes processes as an example. Okay, now we have three yes process running again. Let&#39;s run ‘pkill -15 ye&#39;. Remember, when we tried this with killall, it failed. But as you can see, pkill found and killed all the yes processes. Although this is very handy, it can also be very dangerous. If you&#39;re not familiar with all the processes running on your system, you may inadvertently kill a process you didn&#39;t intend to. So use this command carefully.</p><p>Locate Zombie Processes 05:13-06:27 This leads us into the last topic I wanted to cover. As I mentioned earlier, a system may have processes running as a result of a zombie attack. You would want to use one of these kill commands to terminate that process. In most cases, you would use kill -9. That&#39;s easy. The difficult part is finding the zombie process.</p><p>One way to find zombie processes is using the ‘ps aux&#39; command. The added ‘aux&#39; options represent the three things the ps command will look for. ‘a&#39; tells ps to show the processes for all users. ‘u&#39; displays the user or owner of the processes. And ‘x&#39; includes the processes not attached to a terminal.</p><p>So, let&#39;s see how it works. Let&#39;s add the pipe sign (|) and the word ‘less&#39; and press enter. The less command lets you page through the results more easily. When looking for zombies, you&#39;ll want to look in the ‘STAT&#39; column for the letter Z. When I page down to the bottom, I see I have one zombie process running, with a PID of 4256. Notice the letter Z in the STAT column. I&#39;ll type q to get out of the ps dialog. And now, I&#39;ll kill the zombie process by tying ‘kill -9 4256, and it&#39;s gone.</p><p>Summary 06:27-06:50 That&#39;s it for this demonstration. In this demo, we talked about how to find and kill processes. First, we looked at the kill command. Then we used the killall command and the pkill command. We ended this demonstration with finding zombie processes using the ps aux command and then killing that process.</p><h3 id="_4-1-7-disable-windows-services" tabindex="-1"><a class="header-anchor" href="#_4-1-7-disable-windows-services"><span>4.1.7 Disable Windows Services</span></a></h3><p>You are the security analyst for a small corporate network. You have had problems with users installing remote access services like Remote Desktop Services and VNC Server. You need to find, stop, and disable these services on all computers running them.</p><p>In this lab, your task is to:</p><ul><li>Use Zenmap to run a scan on the <b class="fw-bold">192.168.0.0/24</b> network to look for the following open ports: <ul><li>Port 3389 - Remote Desktop Services (TermServices)</li><li>Port 5900 - VNC Server (vncserver)</li><li>Answer Questions 1 and 2.</li></ul></li><li>Disable and stop the services for the open ports found running on the applicable computers.<br> Use the following table to identify the computers:</li><li style="list-style:none;display:inline;"><table><tbody><tr class="header"><td class="centered">IP Address</td><td class="contentheader">Computer Name</td></tr><tr><td class="centered">192.168.0.30</td><td class="content">Exec</td></tr><tr><td class="centered">192.168.0.31</td><td class="content">ITAdmin</td></tr><tr><td class="centered">192.168.0.32</td><td class="content">Gst-Lap</td></tr><tr><td class="centered">192.168.0.33</td><td class="content">Office1</td></tr><tr><td class="centered">192.168.0.34</td><td class="content">Office2</td></tr><tr><td class="centered">192.168.0.45</td><td class="content">Support</td></tr><tr><td class="centered">192.168.0.46</td><td class="content">IT-Laptop</td></tr></tbody></table></li></ul>',93)]))}const u=n(l,[["render",c],["__file","4.1.html.vue"]]),p=JSON.parse('{"path":"/CyberDefensePro/4.1.html","title":"2.1 Regulations and Standards","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"2.1 Regulations and Standards","description":"some description"},"headers":[{"level":2,"title":"Section 4.1 Operating System Concepts","slug":"section-4-1-operating-system-concepts","link":"#section-4-1-operating-system-concepts","children":[{"level":3,"title":"4.1.1 View Windows Services","slug":"_4-1-1-view-windows-services","link":"#_4-1-1-view-windows-services","children":[]},{"level":3,"title":"4.1.2 View Linux Services","slug":"_4-1-2-view-linux-services","link":"#_4-1-2-view-linux-services","children":[]},{"level":3,"title":"4.1.3 System Hardening and Configuration Files","slug":"_4-1-3-system-hardening-and-configuration-files","link":"#_4-1-3-system-hardening-and-configuration-files","children":[]},{"level":3,"title":"4.1.4 Scanning and Terminating Processes","slug":"_4-1-4-scanning-and-terminating-processes","link":"#_4-1-4-scanning-and-terminating-processes","children":[]},{"level":3,"title":"4.1.7 Disable Windows Services","slug":"_4-1-7-disable-windows-services","link":"#_4-1-7-disable-windows-services","children":[]}]}],"git":{"updatedTime":1746415970000},"filePathRelative":"CyberDefensePro/4.1.md"}');export{u as comp,p as data};
