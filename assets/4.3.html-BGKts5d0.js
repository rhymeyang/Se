import{_ as i,c as n,b as e,d as t,a as s,o}from"./app-FwNIowIB.js";const r="/Se/images/CyberDefensePro/sso_cdp2-4.3.7.png",c={};function l(h,a){return o(),n("div",null,a[0]||(a[0]=[e("h2",{id:"section-4-3-identity-and-access-management-iam",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#section-4-3-identity-and-access-management-iam"},[e("span",null,"Section 4.3 Identity and Access Management (IAM)")])],-1),e("p",null,"As you study this section, answer the following questions:",-1),e("ul",null,[e("li",null,"Why is identity and access management important to an organization?"),e("li",null,"How is role-based access management different from attribute-based access management?"),e("li",null,"What role does multi-factor authentication play in identity and access management?"),e("li",null,"What are six different design styles that can provide software assurance?")],-1),e("p",null,"The key terms for this section include:",-1),e("table",{class:"terms"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Term"),e("th",{scope:"col",class:"fw-bold"}," Definition")])]),e("tbody",null,[e("tr",null,[e("td",null,"Role-based access management"),e("td",null,"An access management strategy where people are granted privileges depending on their role in the organization.")]),e("tr",null,[e("td",null,"Central policy"),e("td",null,"A program that checks for the correct attributes in an attribute-based system.")]),e("tr",null,[e("td",null,"Attribute-based access management"),e("td",null,"An access management strategy where an attribute is created for every element of an organization's operations.")]),e("tr",null,[e("td",null,"Multi-factor authentication"),e("td",null,"An authentication process that requires two or more steps.")]),e("tr",null,[e("td",null,[t("Service-oriented architecture "),e("br"),t(" (SOA)")]),e("td",null,"A kind of software design that contains several services that communicate with each other over a network.")]),e("tr",null,[e("td",null,[t("Security Assertions Markup Language "),e("br"),t(" (SAML)")]),e("td",null,"An XML-based open standard that facilitates the secure passing of authorization credentials from identity providers to service providers.")]),e("tr",null,[e("td",null,[t("Simple Object Access Protocol "),e("br"),t(" (SOAP)")]),e("td",null,"A messaging protocol that is based on XML. It is used for exchanging information between different computers over the internet.")]),e("tr",null,[e("td",null,[t("Representational State Transfer "),e("br"),t(" (REST)")]),e("td",null,"An architectural style that provides standards between different computer systems on the internet and makes it much easier for systems to communicate with each other.")])])],-1),e("p",null,"This section helps you prepare for the following certification exam objectives:",-1),e("table",{class:"objectives"},[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Exam"),e("th",{scope:"col",class:"fw-bold"}," Objective")])]),e("tbody",null,[e("tr",null,[e("td",null,"CompTIA CySA+ CS0-003"),e("td",null,[e("p",null,"1.1 Explain the importance of system and network architecture concepts in security operations"),e("ul",null,[e("li",null,"Identity and access management"),e("ul",null,[e("li",null,"Multi-factor authentication (MFA)"),e("li",null,"Single sign-on (SSO)"),e("li",null,"Federation"),e("li",null,"Privileged access management (PAM)"),e("li",null,"Passwordless"),e("li",null,"Cloud access security broker (CASB)")])])])]),e("tr",null,[e("td",null,"TestOut CyberDefense Pro"),e("td",null,[e("p",null,"3.1 Implement security controls to mitigate risk"),e("ul",null,[e("li",null,"Implement cloud security")]),e("p",null,"5.1 Implement identity and access management (IAM)"),e("ul",null,[e("li",null,"Administer user accounts"),e("li",null,"Manage user-based and role-based access"),e("li",null,"Configure account policies and account control")])])])])],-1),s('<h3 id="_4-3-1-identity-and-access-management" tabindex="-1"><a class="header-anchor" href="#_4-3-1-identity-and-access-management"><span>4.3.1 Identity and Access Management</span></a></h3><p>Click one of the buttons to take you to that part of the video.</p><p>Identity and Access Management 00:00-00:38 Imagine you&#39;re a school principal. You have various departments working under you, from the teaching staff to the janitorial staff to others. In this situation, you&#39;d want to grant different workers different access levels for your building.</p><p>As the principal, you&#39;d have the master key that would let you get anywhere, while teachers would have keys to their rooms and other important common areas. The food service staff would be able to access the kitchen, and the janitors would have access to almost anywhere. All staff members would be required to wear employee ID badges to identify their role at the school.</p><p>Different Privileges 00:38-01:21 This is basically what happens in an enterprise IT environment. Different network users need specific access privileges and rights. A network administrator needs different privileges than his or her subordinate employees, who in turn have different privileges than customers. It&#39;s also important for each person on a network to have a unique digital identity so management can monitor their network activity. This is known as identity and access management, or IAM. The main idea behind IAM is that a system first identifies a user before allowing him or her access to a certain level of information or control. It&#39;s like having a security guard outside an office building that only lets people in who have proper identification.</p><p>RBAC 01:21-02:22 Let&#39;s switch gears and talk a little about different kinds of identity and access management. Some systems have what&#39;s called a superuser. No, it&#39;s not an employee that can leap buildings in a single bound. The superuser is the person who&#39;s allowed to access everything on a network. On this network, at least, they have ultimate power.</p><p>The superuser has all privileges and can grant them to others. He or she can grant users privileges based on the company role they&#39;re in. So, ideally, each user gets what they need to do their jobâ€”no more and no less. This is known as role-based access control, or RBAC, and it helps keep up security because no one has more access than they need for their position. For example, somebody on the Quality Assurance team probably needs access to behind-the-scenes material that isn&#39;t available to the public or to other departments. Another user, though, might be in Customer Service. They, most likely, need access to customer records but not to the in-progress material that the QA team needs.</p><p>ABAC 02:22-02:54 An alternative to RBAC is attribute-based access control, or ABAC. ABAC is based on creating a set of attributes for every element in your company&#39;s system. These attributes can include users, their positions, departments, clearances, and so on. It can also include objects, their kind, author, or required clearance level. There are attributes for actions as well, such as reading, writing, editing, and copying files. And there are also environmental attributes, like time, date, and location.</p><p>Central Policy 02:54-03:49 If you want to take a train, you first need to have the right kind of ticket. In this attribute-based system, you give employees their tickets, or the attributes that let them get to where they need to go. To</p><p>facilitate this, there&#39;s a central policy, which is kind of like a train conductor. The conductor, as it were, decides which combination of user and object attributes an employee needs. If someone doesn&#39;t have the proper combination, they&#39;re probably going to stay on the platform.</p><p>Identity and access management is something you likely encounter in your day-to-day life. For example, the following activities all use IAM: entering a PIN, scanning a fingerprint, and logging onto a website. All these things make you prove you are who you say you are before they grant you access to their service or system. It&#39;s a good thing you have to enter your PIN at an ATM, or anyone might be able to access your account and take your money!</p><p>Create Strong Security 03:49-04:14 One of the most important aspects of IAM is finding secure ways to identify users. Many IAM systems use passwords. This can cause problems if individual users don&#39;t use strong passwords that can&#39;t be easily hacked. A lot of times, people use the same password for all their online accounts. That means if a hacker discovers one password, they&#39;ve got access to almost everything.</p><p>Multi-Factor Authentication 04:14-04:49 For an extra layer of security, some programs require two-factor authentication, which means that users have to identify themselves two different ways. For example, they might use a password and then be required to enter a code that&#39;s texted to their mobile device. This makes it harder to pretend to be someone else. Most systems monitor which users access the system and when. This creates a log that you can manually review to make sure no unauthorized persons have gained access to the system. Simply reviewing the log can help you or the system admins get to the bottom of any problem.</p><p>Summary 04:49-05:28 That&#39;s it for this lesson. To recap, companies and individuals want to keep their information safe. In order to do this, they need to be able to set limits on who can access certain information. Identity and access management provides a way for system users to first identify themselves, and then gain access to the information they need. There are different identity management methods you can choose from, including role-based and attribute-based controls. Also, remember that systems keep user activity logs. It&#39;s a good idea to keep this in mind in case of an emergency.</p><h3 id="_4-3-2-identity-and-access-management-facts" tabindex="-1"><a class="header-anchor" href="#_4-3-2-identity-and-access-management-facts"><span>4.3.2 Identity and Access Management Facts</span></a></h3><p>In enterprise IT, all network users must be given access privileges and rights. Access privileges and rights are based on the user&#39;s role, the resource&#39;s attributes, or a combination of the two. Each user on the network must have a unique digital identity. This is known as identity and access management (IAM).</p><p>This lesson covers the following topics:</p><ul><li>Role-based access control</li><li>Attribute-based access control</li><li>Identity access management</li><li>Mandatory access control</li><li>System monitoring and network architecture</li></ul><h4 id="role-based-access-control" tabindex="-1"><a class="header-anchor" href="#role-based-access-control"><span>Role-Based Access Control</span></a></h4><p>Each network user, including each customer and contractor, can be granted network and resource access based on that individual&#39;s organizational role. This is known as role-based access control (RBAC).</p><p>For example, the network administrator should be granted access to the resources required to perform the job of a network administrator. Each role (such as for a member of the QA team, for a customer service representative, or for a contractor) can be granted privileges appropriate for those specific responsibilities. Each user should get only the access they need, no more and no less.</p><h4 id="attribute-based-access-control" tabindex="-1"><a class="header-anchor" href="#attribute-based-access-control"><span>Attribute-Based Access Control</span></a></h4><p>An alternative to RBAC is attribute-based access control (ABAC). In an ABAC system, each resource in your organization is assigned a set of attributes. These attributes can include:</p><ul><li>User attributes such as job position, department, and clearance level</li><li>Objects attributes such as type, author, and required level of clearance</li><li>Actions such reading files, writing files, editing files, and copying files</li><li>Environmental factors such as date, time, and location</li></ul><p>In an attribute-based system, network users (employees, customers, contractors, etc.) are given the attributes (or tickets) that grant them permission to access the necessary resources.</p><p>To facilitate this, there is a central policy that determines the combination of attributes needed to perform any given action in the system. If a user does not have the proper combination of attributes, he or she will not have access to the resource.</p><h4 id="identity-access-management" tabindex="-1"><a class="header-anchor" href="#identity-access-management"><span>Identity Access Management</span></a></h4><p>Identity access management (IAM) is something that you likely encounter in your day-to-day life. You use IAM when you:</p><ul><li>Enter a PIN</li><li>Scan a fingerprint</li><li>Log in to a website</li></ul><p>All these things are you proving who you say you are before you are granted access. For example, you are required to provide your debit card and enter your PIN at an ATM. Otherwise, anyone might be able to access your account and take your money.</p><h4 id="mandatory-access-control" tabindex="-1"><a class="header-anchor" href="#mandatory-access-control"><span>Mandatory Access Control</span></a></h4><p>Mandatory access control (MAC) uses labels for both subjects (users who need access) and objects (resources with controlled access, such as data, applications, systems, networks, and physical space). Every operation performed is tested against a set of authorization policies to determine if the operation is allowed. For example:</p><ul><li>Classification labels, such as Secret or Top Secret, are assigned to objects by their owner, who is usually a managerial or governmental entity.</li><li>Clearance labels are assigned to subjects.</li></ul><p>When a subject&#39;s clearance lines up with an object&#39;s classification, and the user has a need to know (referred to as a category), the user is granted access. Access control is mandatory because access is based on policy (the matching of the labels) rather than identity. Owners can only assign labels; they cannot allow access to specific subjects.</p><p>MAC can only be implemented and managed by an administrator, as it is a hierarchical system. Because of its implementation, a user will have rights to any security level equal to or lower than theirs in the hierarchy.</p><p>Some of the benefits of using MAC are security. Since users cannot set or change their access control, the administrator always knows exactly what permissions will be granted. For this reason, the government&#39;s military systems were one of the fist to adopt this method. Many other implementations (such as SELinux and AppArmor for Linux, along with Mandatory Integrity Control for Windows) are now using the MAC model. The biggest concern with MAC is the fact that since it can only be set up and managed by an administrator, it can quickly become cumbersome as systems become larger and more complex.</p><h4 id="system-monitoring-and-network-architecture" tabindex="-1"><a class="header-anchor" href="#system-monitoring-and-network-architecture"><span>System Monitoring and Network Architecture</span></a></h4><p>In the following interview, a cybersecurity expert explains their experience with system monitoring and network architecture.</p><h4 id="video" tabindex="-1"><a class="header-anchor" href="#video"><span>Video</span></a></h4><h3 id="_4-3-3-federation" tabindex="-1"><a class="header-anchor" href="#_4-3-3-federation"><span>4.3.3 Federation</span></a></h3><p>Click one of the buttons to take you to that part of the video.</p><p>Federation 00:00-01:14 Gone are the days when you just had to memorize a password or two. These days, you have accounts for everything, from social media sites to school assignments. Choosing only one or two passwords for your dozens of accounts is a bad idea.</p><p>If a hacker can compromise one of these shared passwords, they can access multiple sites of yours.</p><p>It&#39;s like the difference between having a key ring full of keys for each door in a building and having a single master key that opens any lock.</p><p>One way to keep your passwords secure and under control is called federated identity management, also known simply as federation. It&#39;s a type of single sign-on, or SSO. SSO is a process that allows users to sign into a single trusted account, such as Google or Facebook, which will enable them to log into various sites without having to repeat the whole process under different usernames.</p><p>Federation is a trust relationship that exists between different organizations or applications. It allows users&#39; credentials to be stored so trusted third parties can authenticate using those credentials without actually seeing them. In other words, one entire system is responsible for authenticating the user.</p><p>Federation Components 01:14-02:02 The first part of a federation system is called an identity provider, or IDP. It does the heavy lifting of authentication. The second part is a service provider, or SP. These are the sites or apps that need to have users authenticate. The message that goes back and forth between the IDP and SP is called the assertion.</p><p>An assertion is made up of a few components, including the user&#39;s account name and all the other attributes the SP needs to start a session for the user. It contains a digital signature so the SP can be sure it came from the correct IDP. The SP doesn&#39;t do any authentication. It trusts the IDP to take care of all of that. A single IDP can take care of multiple SPs, simplifying the process even more.</p><p>Federation Protocols 02:02-02:30 There are various types of federation protocols that can be used to achieve this. The most common protocols include SAML1.1, WS-Federation, OAuth2, OpenID Connect, WS-Trust, and SAML2. Which protocol you use largely depends on your organization&#39;s needs. Today, one of the most common protocols is SAML, which stands for Secure Assertion Markup Language.</p><p>Shibboleth 02:30-03:15 Let&#39;s look at an example. A very common federated identity method based on SAML is Shibboleth. Many universities and public service organizations use Shibboleth. Let&#39;s look at how it works.</p><p>In a Shibboleth implementation, a user attempts to retrieve resources from a Shibboleth-enabled website, which then sends SAML authentication information over URL queries. The user is then redirected to an identity provider with which they can authenticate using this SAML information. The identity provider then responds to the service provider (the Shibboleth-enabled website) with the proper authentication information. The site validates this response and grants the user access to certain resources based on their SAML information.</p><p>Transitive Trust Model 03:15-04:08 Sometimes federated identity management is part of a transitive trust model. Trust models determine how organizations establish relationships among authentication services to authorize different users access to various resources. In a transitive trust relationship, if resource A trusts resource B, and resource B trusts resource C, then resource A trusts resource C.</p><p>For example, let&#39;s say you want a gym membership at your local gym. They ask you to go to their website to create an account.</p><p>You see that the site gives you the option to sign in with your Google account. In this case, the gym&#39;s website trusts Google&#39;s authentication.</p><p>Now, let&#39;s say your gym has a vendor that provides bicycle rentals, and they allow you to have an account through the gym account. In this case, the vendor trusts Google&#39;s authentication through the gym&#39;s account.</p><p>Federation Advantages 04:08-04:51 There are many advantages to setting up a federation arrangement.</p><p>A big one is making it easier to onboard new users to various programs. If you have a new employee, they likely need to be able to log into multiple systems, such as company email, the timekeeping system, etc. If you have a federated system, you don&#39;t have to set up a separate account for each company&#39;s systems.</p><p>Another advantage is making things easier for the end user. They only need to know one login process to log into various systems more quickly.</p><p>Finally, federation allows for better user management. You don&#39;t have to rely on the various applications to take care of authentication for you, so you can keep better track of your users by doing it yourself.</p><p>Summary 04:51-05:23 That&#39;s all for this lesson. To recap, one way to deal with having too many passwords to remember is federation. It&#39;s a single sign-on process allowing companies to set up an identity provider for all user authentication needs. These identity providers send authentication information to service providers, which are the different apps or sites that are part of the federation organization. There are a variety of federation standards, with the most common being SAML. Federation provides a great number of advantages for both the users and the administrators.</p><h3 id="_4-3-4-federation-facts" tabindex="-1"><a class="header-anchor" href="#_4-3-4-federation-facts"><span>4.3.4 Federation Facts</span></a></h3><p>With the number of accounts that require passwords these days, users are tempted to use the same password for multiple accounts. However, it is a bad idea to choose only one or two passwords for all accounts. If one password is compromised, a hacker has to access multiple sites. There are ways to help remediate this problem.</p><p>This lesson covers the following topics:</p><ul><li>Federation overview</li><li>Federation protocols</li><li>Advantages of federation</li><li>Shibboleth</li><li>Transitive trust models</li></ul><h4 id="federation-overview" tabindex="-1"><a class="header-anchor" href="#federation-overview"><span>Federation Overview</span></a></h4><p>Federated identity management is one way to control the security of passwords. Federated identity management is also referred to as federation. It is a type of single sign-on (SSO).</p><p>SSO is a process that allows users to sign into a single trusted account, such as Google or Facebook. The user is then allowed to log in to a variety of sites without being required to log in again. Federation:</p><ul><li>Is a trust relationship that exists between organizations or applications.</li><li>Allows one entity to be is responsible for the authentication of the user.</li><li>Stores a user&#39;s credentials so that trusted third parties can authenticate using those credentials without seeing the credentials.</li></ul><p>A federation consists of two parts.</p><ul><li>An identity provider (IDP) authenticates users.</li><li>A service provider (SP) is the site or app that needs to authenticate users and trusts the IDP for this authentication.</li></ul><p>Key points about how the federation works are as follows.</p><ul><li>An assertion is the message that goes back and forth between the IDP and SP.</li><li>The assertion is made up of a few components, including the userâ€™s account name and all the other attributes the SP needs to start a session for the user.</li><li>The assertion contains a digital signature so that the SP can be sure it came from the correct IDP.</li><li>The SP does not authenticate the user.</li><li>A single IDP can take care of multiple SPs, which simplifies the authentication process.</li></ul><h4 id="federation-protocols" tabindex="-1"><a class="header-anchor" href="#federation-protocols"><span>Federation Protocols</span></a></h4><p>There are various types of protocols that can be used with federation. Some of the most common protocols are:</p><ul><li>Secure Assertion Markup Language (SAML) 1.1</li><li>WS-Federation</li><li>OAuth2</li><li>OpenID Connect</li><li>WS-Trust</li><li>SAML 2</li></ul><p>The protocol you use depends on the needs of your organization. Today, one of the most common protocols is SAML.</p><h4 id="advantages-of-federation" tabindex="-1"><a class="header-anchor" href="#advantages-of-federation"><span>Advantages of Federation</span></a></h4><p>There are many advantages to setting up a federation arrangement that make a business&#39; operations smoother and more secure. These include:</p><ul><li>Easier employee onboarding</li><li>Simpler end user experience</li><li>Better user management</li></ul><h4 id="shibboleth" tabindex="-1"><a class="header-anchor" href="#shibboleth"><span>Shibboleth</span></a></h4><p>Shibboleth is a federated identity method based on SAML and is often used by universities and public service organizations.</p><p>A Shibboleth implementation includes the following steps:</p><ol><li>A user attempts to retrieve resources from a Shibboleth-enabled website,</li><li>The Shibboleth-enabled website sends SAML authentication information over URL queries.</li><li>The user is redirected to an identity provider with which they can authenticate using this SAML information.</li><li>The identity provider responds to the service provider (the Shibboleth-enabled website) with the proper authentication information.</li><li>The site validates this response and grants the user access to certain resources based on their SAML information.</li></ol><h4 id="transitive-trust-models" tabindex="-1"><a class="header-anchor" href="#transitive-trust-models"><span>Transitive Trust Models</span></a></h4><p>In planning authentication and authorization, a trust model defines the relationships between authentication services so that they may accept each other&#39;s assertions of users&#39; identities and permissions, when appropriate. Trust models determine how organizations establish relationships among authentication services to authorize different users&#39; and groups&#39; access to various resources. Active Directory is an example of technology that can implement peer trust between domains.</p><p>It is helpful to understand the following about transitive trust models:</p><ul><li>In a transitive trust relationship, if resource A trusts resource B, and resource B trusts resource C, then resource A trusts resource C.</li><li>Peer trust models can avoid a single point of failure, like in a hierarchical model, using a ticketing system, cached credentials, or other technologies (but they are typically more complex and take more time to operate).</li><li>Two domains can implicitly trust one another if they have already established trust with the same additional domains.</li></ul><h3 id="_4-3-5-service-oriented-architecture" tabindex="-1"><a class="header-anchor" href="#_4-3-5-service-oriented-architecture"><span>4.3.5 Service-Oriented Architecture</span></a></h3><p>Click one of the buttons to take you to that part of the video.</p><p>Service-Oriented Architecture 00:00-00:59 In this lesson, we&#39;ll focus on service-oriented architectureâ€”or SOAâ€”and the essential software assurance best practices associated with this powerful design style. We&#39;ll also explore some fundamental SOA concepts and how they make building robust software systems much easier. SOA is especially helpful for enterprise applications, so let&#39;s get started.</p><p>At its core, SOA comprises multiple servicesâ€”better described as modulesâ€”that seamlessly communicate with each other over a network using a conceptual design called an enterprise services bus. The beauty of SOA lies in this modular nature. Each service is self-contained, enabling independent maintenance without disrupting other services&#39; functionality. This granularity facilitates easier debugging, thus reducing the complexity of managing large blocks of code. Moreover, SOA promotes code reusability, making it easier to develop and maintain software in the long run.</p><p>Microservices 00:59-01:37 Within the realm of SOA, we encounter another fascinating concept: microservices. These are even more granular services designed to fulfill specific business needs. They communicate using protocols like HTTP and Thrift API, providing a loosely connected architecture. The true strength of microservices lies in their fault tolerance and scalability. As each microservice functions independently, the failure of one won&#39;t bring down the entire application. This architecture enables the rapid deployment of large applications, allowing companies to expand their offerings with ease.</p><p>Security Assertion Markup Language (SAML) 01:37-02:12 Moving on to security measures within SOA, we encounter the Security Assertion Markup Language, or SAML. It&#39;s an XML-based open standard that facilitates the secure passing of authorization credentials from identity providers to service providers. SAML enables a convenient feature known as single sign-on, or SSO, where users can employ one set of credentials to log in to multiple websites and applications. This not only enhances security by reducing the need for multiple identities, but also streamlines user access and decreases administrative costs.</p><p>OpenID 02:12-03:22 One popular option for SSO authentication is OpenID, an open standard protocol that allows users to authenticate across participating sites using a third-party identity provider. Major companies like Google and Amazon have implemented their own OpenID systems. By registering with OpenID, users can conveniently sign in to websites with their own created credentials. The site verifies the login information through the external OpenID provider. This makes things really secure by adding an extra layer of authentication to OAuth 2.0.</p><p>When it comes to SOA communication protocols, two widely used options are Simple Object Access Protocolâ€”or SOAPâ€”and Representational State Transferâ€”or REST. SOAP, which is also based on XML, facilitates data exchange between applications running on different computers that are written in different programming languages. REST, on the other hand, provides a simpler communication standard for different computer systems on the internet. &quot;RESTful&quot; systems are stateless, separating client and server concerns, giving us greater compatibility and responsiveness.</p><p>Summary 03:22-03:48 And that&#39;s it for this lesson. We explored the foundations of service-oriented architecture and its vital role in modern software development. We learned about the benefits of microservices, the secure passing of credentials using SAML and OpenID, and the SOAP and REST communication protocols. By implementing these software assurance best practices, organizations can enhance the security, reliability, and scalability of their software systems.</p><h3 id="_4-3-6-service-oriented-architecture-facts" tabindex="-1"><a class="header-anchor" href="#_4-3-6-service-oriented-architecture-facts"><span>4.3.6 Service-Oriented Architecture Facts</span></a></h3><p>Software assurance refers to the confidence that software is secure and functional. Depending on the software function, there are different styles of software design that can provide software assurance.</p><p>This lesson covers design styles.</p><h4 id="design-styles" tabindex="-1"><a class="header-anchor" href="#design-styles"><span>Design Styles</span></a></h4><p>The following table describes types of design styles.</p>',101),e("table",null,[e("thead",null,[e("tr",null,[e("th",{class_:"firstTableHeader",scope:"col",class:"fw-bold"}," Design Style"),e("th",{scope:"col",class:"fw-bold"}," Description")])]),e("tbody",null,[e("tr",null,[e("td",null,[t("Service-Oriented Architecture "),e("br"),t(" (SOA)")]),e("td",null,[t("SOA is mostly used in enterprise applications. This design style combines multiple self-contained services that communicate with each other over the network to provide the application functionality. SOA services: "),e("ul",null,[e("li",null,"Are independent of each other."),e("li",null,"Are easier to maintain than interdependent services."),e("li",null,"Can be reused in many applications."),e("li",null,"Reduce development costs.")])])]),e("tr",null,[e("td",null,"Microservices"),e("td",null,[t("Microservices are a type of SOA, but the services are more granular. Microservices: "),e("ul",null,[e("li",null,"Function independent of each other. If one service fails, the application can keep working."),e("li",null,"Scales easily because each service is independent."),e("li",null,"Allow large complex applications to be quickly deployed.")])])]),e("tr",null,[e("td",null,[t("Security Assertions Markup Language "),e("br"),t(" (SAML)")]),e("td",null,[t("SAML is an XML-based open standard that identity providers use to pass authorization credentials to service providers. This means that one set of credentials can be used to login to multiple websites. This is known as single sign-on (SSO) and is widely used over the internet. "),e("br"),e("br"),t(" SAML attestations (or authorizations) are written in eXtensible Markup Language (XML). Communications are established using HTTP/HTTPS and the Simple Object Access Protocol (SOAP). These secure tokens are signed using the XML signature specification. The use of a digital signature allows the relying party to trust the identity provider. "),e("br"),e("br"),t(" As an example of a SAML implementation, Amazon Web Services (AWS) can function as a SAML service provider. This allows companies using AWS to develop cloud applications to manage their customers' user identities and provide them with permissions on AWS without having to create accounts for them on AWS directly. "),e("br"),e("br"),t(" SAML benefits include: "),e("ul",null,[e("li",null,"Increases security by eliminating the need to maintain multiple identities."),e("li",null,"Increases application access by reducing the need to individually log into each separate site."),e("li",null,"Decreases administrative costs by reducing the need to maintain duplicate sign-on credentials."),e("li",null,"Provides a secure connection between two sites.")])])]),e("tr",null,[e("td",null,[t("Simple Object Access Protocol "),e("br"),t(" (SOAP)")]),e("td",null,[t("SOAP is an XML-based messaging protocol used for exchanging data over the internet between applications that run on different platforms and are written in different programming languages. It is built to be extensible, protocol neutral, and independent of any programming model. "),e("br"),e("br"),t(" SOAP can be used for: "),e("ul",null,[e("li",null,"XML messaging"),e("li",null,"Data transport between web services"),e("li",null,"Remote procedure calls"),e("li",null,"Message broadcast"),e("li",null,"Document transport")]),e("br"),t(" A SOAP message contains three parts: "),e("ul",null,[e("li",null,"An envelope that defines the structure"),e("li",null,"A set of encoding rules"),e("li",null,"A convention for representing calls/responses")])])]),e("tr",null,[e("td",null,[t("Representational State Transfer "),e("br"),t(" (REST)")]),e("td",null,[t("REST is an architectural style that provides simple communication standards on the internet between computer platforms. Systems that use REST are often known as RESTful systems. RESTful systems: "),e("br"),e("br"),e("ul",null,[e("li",null,"Are stateless and separate the concerns of the client and server. This means changing the code on one side will not affect the other side."),e("li",null,"Cache response data and allow it to be reused when an equivalent request is made. This is referred to as being cacheable."),e("li",null,"Implement a hierarchical layered system. This means a layer cannot see beyond the layer it is currently interacting with.")])])]),e("tr",null,[e("td",null,"OpenID"),e("td",null,[t("OpenID is a method of authenticating users with certain sites that participate in an OpenID system. This enables them to retain a single account for all participating sites. Large companies, such as Google and Amazon, use their own OpenID systems. OpenID Direct adds a layer of authentication to OAuth 2.0, the latest version of the protocol. "),e("br"),e("br"),t(" OpenID uses the following process: "),e("br"),e("ol",null,[e("li",null,"A user will register with an OpenID system in a given domain like they would with any other account."),e("li",null,"A site under this OpenID domain will then give the user the option to sign in using this system."),e("li",null,"The site contacts its external OpenID provider in order to verify that the login credentials supplied by the user are correct.")])])])])],-1),s('<h3 id="_4-3-7-authentication-mechanisms-facts" tabindex="-1"><a class="header-anchor" href="#_4-3-7-authentication-mechanisms-facts"><span>4.3.7 Authentication Mechanisms Facts</span></a></h3><p>Almost every website you visit wants you to sign up for an account with a password. Good digital security practices advise you to have a different password for each account, but that can quickly get out of hand.</p><p>This lesson covers the following topics:</p><ul><li>Sign in without single sign-on</li><li>Sign in with single sign-on</li><li>Multi-factor authentication (MFA)</li><li>2-step verification</li><li>Passwordless authentication</li><li>Privileged access management (PAM)</li></ul><h4 id="sign-in-without-single-sign-on" tabindex="-1"><a class="header-anchor" href="#sign-in-without-single-sign-on"><span>Sign In without Single Sign-On</span></a></h4><p>If a website does not require single sign-on (SSO), it must keep its own database of users and their login credentials. It then goes through the following process:</p><ol><li>The user enters credentials on the home page.</li><li>The website verifies the credentials in its database.</li><li>If the credentials don&#39;t match the database, the user is denied.</li><li>If the credentials match the database, the user is granted access.</li><li>Authentication data is passed to web pages.</li></ol><h4 id="sign-in-with-single-sign-on" tabindex="-1"><a class="header-anchor" href="#sign-in-with-single-sign-on"><span>Sign In with Single Sign-on</span></a></h4><p>With single sign-on, the process is much easier. The website does not have to check its database for user credentials. It relies on a third party, such as Google or Facebook, for authentication. With single sign-on, the process is as follows:</p><ol><li>The user enters credentials on the home page.</li><li>The website checks to see if the logon is SSO.</li><li>If so, the website sends the credentials to an authentication server.</li><li>The authentication server verifies the credentials.</li><li>If the credentials match the authentication server database, the user is granted access.</li><li>Authentication data is passed to the web pages.</li><li>If the credentials don&#39;t match the database, the user is denied access.</li></ol><h4 id="multi-factor-authentication-mfa" tabindex="-1"><a class="header-anchor" href="#multi-factor-authentication-mfa"><span>Multi-Factor Authentication (MFA)</span></a></h4><p>Multi-factor authentication uses two or more factors of authentication, such as a password plus a security code sent to a phone number on file. It can even include authentication attributes such as gait analysis and geo-location to improve its rigor. MFA provides an extra layer of security to an account. It is especially useful when using a single sign-on account to make sure it has not been compromised. For example, a password can be written down, guessed, or shared, or a smart card could be lost or stolen. When using MFA, abusing authentication becomes far more complex. When the requirement for a password is combined with a token-generated PIN or to be combined with a fingerprint scan, abusing authentication becomes many, many factors more complicated. With MFA in place, a username and password can be breached but are unusable without the additional factor.</p><h5 id="authentication-factors" tabindex="-1"><a class="header-anchor" href="#authentication-factors"><span>Authentication Factors</span></a></h5><p>The most common authentication factors fall into one of the following categories:</p><table><thead><tr><th scope="col" class="fw-bold"> Authentication Factor</th><th scope="col" class="fw-bold"> Description</th></tr></thead><tbody><tr><td>Something you know</td><td>A knowledge factor such as a password or PIN.</td></tr><tr><td>Something you have</td><td>A physical factor such as an object in your possession, such as a card or token.</td></tr><tr><td>Something you are</td><td>A physiological attribute or biometric (fingerprint, hand vein, facial recognition, etc.).</td></tr></tbody></table><p>2 -factor authentication (2FA) combines either an ownership-based smart card or biometric identifier with something you know, such as a password or PIN. Three-factor authentication combines all three technologies or incorporates an additional attribute, such as location (for example, a smart card with integrated fingerprint reader). This means that to authenticate, the user must possess the card, the user&#39;s fingerprint must match the template stored on the card, and he or she must input a PIN or password.</p><p><img src="'+r+'" alt="A demonstration of a push notification sent to a smartphone."></p><blockquote><p>Description</p><p>The login tab is displayed on the MacBook Pro. It reads, verify your identity. A line below reads, check your phone for a push notification. The notification on the smartphone reads, Are you logging into office 365? Below it is the location, time, and email address. There is a deny button on the left and an accept button on the right.</p><p>A multifactor authentication (MFA) demonstrating a push-notification sent to a smartphone. (Images Â© 123RF.com.)</p></blockquote><h4 id="_2-step-verification" tabindex="-1"><a class="header-anchor" href="#_2-step-verification"><span>2-Step Verification</span></a></h4><p>2-step verification, or out-of-band mechanism , generates a software token on a server and sends it to a resource assumed to be safely controlled by the user. The token can be transmitted to the device in a number of ways:</p><ul><li>Short Message Service (SMS)â€”The code is sent as a text to the registered phone number.</li><li>Phone callâ€”The code is delivered as an automated voice call to the registered phone number.</li><li>Push notificationâ€”The code is sent to a registered authenticator app on the PC or smartphone.</li><li>Emailâ€”The code is sent to a registered email account.</li></ul><p>These mechanisms are sometimes also described as 2FA. However, anyone intercepting the code within the time frame could enter it as something you know without ever possessing or looking at the device itself ( <a href="https://auth0.com/blog/why-sms-multi-factor-still-matters/" target="_blank" rel="noopener noreferrer">auth0.com/blog/why-sms-multi-factor-still-matters</a> ).</p><p>In-band authentication describes the use of authentication factors that rely on the same system requesting the authentication; for example, providing username and password credentials on a standalone server .</p><h4 id="passwordless-authentication" tabindex="-1"><a class="header-anchor" href="#passwordless-authentication"><span>Passwordless Authentication</span></a></h4><p>Passwordless authentication is a method by which users can access an account without entering a password. This type of authentication relies on biometric authentication, such as facial recognition, fingerprint scanning, voice recognition, or a one-time code sent to a user&#39;s email address or phone number. Passwordless authentication methods are gaining popularity as organizations look for methods to improve the quality, reliability, and rigor of authentication. Passwordless authentication offers a method of authentication that cannot be easily shared (unlike a password) and removes the burden of remembering passwords from employees. Passwordless authentication allows devices to recognize authorized users by using their unique physical characteristics instead of their memory of a password.</p><h4 id="privileged-access-management-pam" tabindex="-1"><a class="header-anchor" href="#privileged-access-management-pam"><span>Privileged Access Management (PAM)</span></a></h4><p>Privileged access management (PAM) is designed to protect against the issues related to credential theft and misuse. PAM refers to the use of people, processes, and technology to control, secure, monitor, and audit all identities used by people as well as services and applications. Using PAM solutions helps security personnel monitor access and ensure credentials are being used in an appropriate way. PAM solutions can store the login credentials of privileged accounts in a secure repository and require additional authentication measures for any entity wishing to use them. Doing so tracks and logs who accessed and used privileged credentials at any time, allowing for greater awareness and visibility into their use. Some examples of PAM software providers include BeyondTrust, Centrify, and CyberArk.</p><h3 id="_4-3-8-cloud-access-security-broker" tabindex="-1"><a class="header-anchor" href="#_4-3-8-cloud-access-security-broker"><span>4.3.8 Cloud Access Security Broker</span></a></h3><p>This lesson covers the following topics:</p><ul><li>Cloud access security broker (CASB)</li><li>CASB functions</li><li>CASB implementations</li></ul><h4 id="cloud-access-security-broker-casb" tabindex="-1"><a class="header-anchor" href="#cloud-access-security-broker-casb"><span>Cloud Access Security Broker (CASB)</span></a></h4><p>A cloud access security broker (CASB) is enterprise management software designed to mediate access to cloud services by users across all types of devices. It monitors activity between cloud service consumers and cloud applications and provides enforcement of security policies.</p><p>CASB vendors include:</p><ul><li>CloudSOC CASB ( <a href="https://www.broadcom.com/products/cybersecurity/information-protection/data-loss-prevention-cloud/cloud-application-security-cloudsoc" target="_blank" rel="noopener noreferrer">broadcom.com/products/cybersecurity/information-protection/data-loss-prevention-cloud/cloud-application-security-cloudsoc</a> )</li><li>Trellix ( trellix.com/en-us/products/cloud.html</li><li>Forcepoint ( <a href="https://www.forcepoint.com/product/casb-cloud-access-security-broker" target="_blank" rel="noopener noreferrer">forcepoint.com/product/casb-cloud-access-security-broker</a> )</li><li>Microsoft ( <a href="https://www.microsoft.com/en-us/security/business/siem-and-xdr/microsoft-defender-cloud-apps" target="_blank" rel="noopener noreferrer">microsoft.com/en-us/security/business/siem-and-xdr/microsoft-defender-cloud-apps</a> )</li><li>Cisco ( <a href="https://www.cisco.com/c/en/us/products/security/cloudlock/" target="_blank" rel="noopener noreferrer">cisco.com/c/en/us/products/security/cloudlock</a> )</li></ul><h4 id="casb-functions" tabindex="-1"><a class="header-anchor" href="#casb-functions"><span>CASB Functions</span></a></h4><p>Some functions of a CASB are as follows:</p><ul><li>Enable single sign-on authentication and enforce access controls and authorizations from the enterprise network to the cloud provider.</li><li>Scan for malware and rogue or noncompliant device access.</li><li>Monitor and audit user and resource activity.</li><li>Mitigate data exfiltration by preventing access to unauthorized cloud services from managed devices.</li></ul><h4 id="casb-implementations" tabindex="-1"><a class="header-anchor" href="#casb-implementations"><span>CASB Implementations</span></a></h4><p>In general, CASBs are implemented in one of three ways:</p><ul><li><strong>Forward proxy</strong> â€”This is a security appliance or host positioned at the client network edge that forwards user traffic to the cloud network if the contents of that traffic comply with policy. This requires configuration of users&#39; devices or installation of an agent. In this mode, the proxy can inspect all traffic in real time, even if that traffic is not bound for sanctioned cloud applications. The problem with this mode is that users may be able to evade the proxy and connect directly. Proxies are also associated with poor performance as without a load balancing solution they become a bottleneck and potentially a single point of failure.</li><li><strong>Reverse proxy</strong> â€”This is positioned at the cloud network edge and directs traffic to cloud services if the contents of that traffic comply with policy. This does not require configuration of the users&#39; devices. This approach is only possible if the cloud application has proxy support.</li><li><strong>Application programming interface (API)</strong> â€”Rather than placing a CASB appliance or host inline with cloud consumers and the cloud services, an API-based CASB brokers connections between the cloud service and the cloud consumer. For example, if a user account has been disabled or an authorization has been revoked on the local network, the CASB would communicate this to the cloud service and use its API to disable access there too. This depends on the API supporting the range of functions that the CASB and access and authorization policies demand. CASB solutions are quite likely to use both proxy and API modes for different security management purposes.</li></ul>',40)]))}const u=i(c,[["render",l],["__file","4.3.html.vue"]]),p=JSON.parse('{"path":"/CyberDefensePro/4.3.html","title":"Section 4.3 Identity and Access Management (IAM)","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Section 4.3 Identity and Access Management (IAM)","description":"some description"},"headers":[{"level":2,"title":"Section 4.3 Identity and Access Management (IAM)","slug":"section-4-3-identity-and-access-management-iam","link":"#section-4-3-identity-and-access-management-iam","children":[{"level":3,"title":"4.3.1 Identity and Access Management","slug":"_4-3-1-identity-and-access-management","link":"#_4-3-1-identity-and-access-management","children":[]},{"level":3,"title":"4.3.2 Identity and Access Management Facts","slug":"_4-3-2-identity-and-access-management-facts","link":"#_4-3-2-identity-and-access-management-facts","children":[]},{"level":3,"title":"4.3.3 Federation","slug":"_4-3-3-federation","link":"#_4-3-3-federation","children":[]},{"level":3,"title":"4.3.4 Federation Facts","slug":"_4-3-4-federation-facts","link":"#_4-3-4-federation-facts","children":[]},{"level":3,"title":"4.3.5 Service-Oriented Architecture","slug":"_4-3-5-service-oriented-architecture","link":"#_4-3-5-service-oriented-architecture","children":[]},{"level":3,"title":"4.3.6 Service-Oriented Architecture Facts","slug":"_4-3-6-service-oriented-architecture-facts","link":"#_4-3-6-service-oriented-architecture-facts","children":[]},{"level":3,"title":"4.3.7 Authentication Mechanisms Facts","slug":"_4-3-7-authentication-mechanisms-facts","link":"#_4-3-7-authentication-mechanisms-facts","children":[]},{"level":3,"title":"4.3.8 Cloud Access Security Broker","slug":"_4-3-8-cloud-access-security-broker","link":"#_4-3-8-cloud-access-security-broker","children":[]}]}],"git":{"updatedTime":1746415970000},"filePathRelative":"CyberDefensePro/4.3.md"}');export{u as comp,p as data};
